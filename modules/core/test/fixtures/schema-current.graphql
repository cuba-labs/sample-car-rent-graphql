"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
) on SCALAR

type Mutation {
    createCar(car: inp_scr_Car): scr_Car
    createCompositionO2OTestEntity(compositiono2otestentity: inp_scr_CompositionO2OTestEntity): scr_CompositionO2OTestEntity
    createDatatypesTestEntity(datatypestestentity: inp_scr_DatatypesTestEntity): scr_DatatypesTestEntity
    createDatatypesTestEntity2(datatypestestentity2: inp_scr_DatatypesTestEntity2): scr_DatatypesTestEntity2
    createDatatypesTestEntity3(datatypestestentity3: inp_scr_DatatypesTestEntity3): scr_DatatypesTestEntity3
    createGarage(garage: inp_scr_Garage): scr_Garage
    createUser(user: inp_sec_User): sec_User
}

"All encompassing schema for this JPA environment"
type Query {
    carById(id: String): scr_Car
    cars: [scr_Car]
    compositiono2otestentityById(id: String): scr_CompositionO2OTestEntity
    compositiono2otestentitys: [scr_CompositionO2OTestEntity]
    datatypestestentity2ById(id: String): scr_DatatypesTestEntity2
    datatypestestentity2s: [scr_DatatypesTestEntity2]
    datatypestestentity3ById(id: String): scr_DatatypesTestEntity3
    datatypestestentity3s: [scr_DatatypesTestEntity3]
    datatypestestentityById(id: String): scr_DatatypesTestEntity
    datatypestestentitys: [scr_DatatypesTestEntity]
    garageById(id: String): scr_Garage
    garages: [scr_Garage]
    userById(id: String): scr_User
    users: [sec_User]
}

type datagen_GeneratedEntity {
    entityName: String
    id: UUID
    instName: String
    instanceId: String
}

type scr_AssociationM2MTestEntity {
    datatypesTestEntities: [scr_DatatypesTestEntity]
    id: UUID
    name: String
}

type scr_AssociationM2OTestEntity {
    id: UUID
    name: String
}

type scr_AssociationO2MTestEntity {
    datatypesTestEntity: scr_DatatypesTestEntity
    id: UUID
    name: String
}

type scr_AssociationO2OTestEntity {
    datatypesTestEntity: scr_DatatypesTestEntity
    deeplyNestedTestEntity: scr_DeeplyNestedTestEntity
    id: UUID
    name: String
}

type scr_BoringStringIdTestEntity {
    description: String
    id: String
    uuid: UUID
}

type scr_Car {
    carType: String
    ecoRank: Int
    garage: scr_Garage
    id: UUID
    manufactureDate: Date
    manufacturer: String
    maxPassengers: Int
    mileage: Float
    model: String
    price: BigDecimal
    purchaseDate: Date
    regNumber: String
    technicalCertificate: scr_TechnicalCertificate
    wheelOnRight: Boolean
}

type scr_CarRent {
    car: scr_Car
    fromDate: Date
    fromDateTime: Date
    fromTime: Date
    id: UUID
}

type scr_CompositionO2MTestEntity {
    datatypesTestEntity: scr_DatatypesTestEntity
    id: UUID
    name: String
    quantity: Int
}

type scr_CompositionO2OTestEntity {
    id: UUID
    name: String
    nestedComposition: scr_DeeplyNestedTestEntity
    quantity: Int
}

type scr_DatatypesTestEntity {
    associationM2Mattr: [scr_AssociationM2MTestEntity]
    associationM2Oattr: scr_AssociationM2OTestEntity
    associationO2Mattr: [scr_AssociationO2MTestEntity]
    associationO2Oattr: scr_AssociationO2OTestEntity
    bigDecimalAttr: BigDecimal
    booleanAttr: Boolean
    byteArrayAttr: String
    compositionO2Mattr: [scr_CompositionO2MTestEntity]
    compositionO2Oattr: scr_CompositionO2OTestEntity
    datatypesTestEntity3: scr_DatatypesTestEntity3
    dateAttr: Date
    dateTimeAttr: Date
    doubleAttr: Float
    enumAttr: String
    id: UUID
    intIdentityIdTestEntityAssociationO2OAttr: scr_IntIdentityIdTestEntity
    integerAttr: Int
    integerIdTestEntityAssociationM2MAttr: [scr_IntegerIdTestEntity]
    localDateAttr: LocalDate
    localDateTimeAttr: LocalDateTime
    localTimeAttr: String
    longAttr: Long
    name: String
    offsetDateTimeAttr: String
    offsetTimeAttr: String
    readOnlyStringAttr: String
    stringAttr: String
    stringIdTestEntityAssociationM2O: scr_StringIdTestEntity
    stringIdTestEntityAssociationO2O: scr_StringIdTestEntity
    timeAttr: Date
    uuidAttr: UUID
}

type scr_DatatypesTestEntity2 {
    datatypesTestEntityAttr: scr_DatatypesTestEntity
    id: UUID
    intIdentityIdTestEntityAttr: scr_IntIdentityIdTestEntity
    integerIdTestEntityAttr: scr_IntegerIdTestEntity
    stringIdTestEntityAttr: scr_StringIdTestEntity
    weirdStringIdTestEntityAttr: scr_WeirdStringIdTestEntity
}

type scr_DatatypesTestEntity3 {
    datatypesTestEntityAttr: [scr_DatatypesTestEntity]
    id: UUID
    intIdentityIdTestEntityAttr: [scr_IntIdentityIdTestEntity]
    integerIdTestEntityAttr: [scr_IntegerIdTestEntity]
    name: String
    stringIdTestEntityAttr: [scr_StringIdTestEntity]
    weirdStringIdTestEntityAttr: [scr_WeirdStringIdTestEntity]
}

type scr_DeeplyNestedTestEntity {
    associationO2Oattr: scr_AssociationO2OTestEntity
    id: UUID
    name: String
}

type scr_FavoriteCar {
    car: scr_Car
    id: UUID
    notes: String
    user: scr_User
}

type scr_Garage {
    address: String
    capacity: Int
    cars: [scr_Car]
    id: UUID
    name: String
    personnel: [scr_User]
    vanEntry: Boolean
    workingHoursFrom: String
    workingHoursTo: String
}

type scr_IntIdentityIdTestEntity {
    datatypesTestEntity: scr_DatatypesTestEntity
    datatypesTestEntity3: scr_DatatypesTestEntity3
    description: String
    id: Int
}

type scr_IntegerIdTestEntity {
    datatypesTestEntities: [scr_DatatypesTestEntity]
    datatypesTestEntity3: scr_DatatypesTestEntity3
    description: String
    id: Int
}

type scr_SparePart {
    id: UUID
    name: String
    spareParts: scr_SparePart
}

type scr_StringIdTestEntity {
    datatypesTestEntity: scr_DatatypesTestEntity
    datatypesTestEntity3: scr_DatatypesTestEntity3
    description: String
    identifier: String
    productCode: String
}

type scr_TechnicalCertificate {
    car: scr_Car
    certNumber: String
    id: UUID
}

type scr_User {
    active: Boolean
    changePasswordAtNextLogon: Boolean
    email: String
    firstName: String
    group: sec_Group
    groupNames: String
    id: UUID
    ipMask: String
    language: String
    lastName: String
    login: String
    loginLowerCase: String
    middleName: String
    name: String
    password: String
    passwordEncryption: String
    phone: String
    position: String
    substitutions: [sec_UserSubstitution]
    sysTenantId: String
    timeZone: String
    timeZoneAuto: Boolean
    userRoles: [sec_UserRole]
}

type scr_WeirdStringIdTestEntity {
    datatypesTestEntity3: scr_DatatypesTestEntity3
    description: String
    id: String
    identifier: String
}

type sec_Constraint {
    checkType: String
    code: String
    entityName: String
    filterXml: String
    groovyScript: String
    group: sec_Group
    id: UUID
    isActive: Boolean
    joinClause: String
    operationType: String
    sysTenantId: String
    whereClause: String
}

type sec_EntityLog {
    changes: String
    entity: String
    entityInstanceName: String
    eventTs: Date
    id: UUID
    sysTenantId: String
    type: String
    user: scr_User
}

type sec_Filter {
    code: String
    componentId: String
    globalDefault: Boolean
    id: UUID
    name: String
    sysTenantId: String
    user: scr_User
    xml: String
}

type sec_Group {
    constraints: [sec_Constraint]
    hierarchyList: [sec_GroupHierarchy]
    id: UUID
    name: String
    parent: sec_Group
    sessionAttributes: [sec_SessionAttribute]
    sysTenantId: String
}

type sec_GroupHierarchy {
    group: sec_Group
    id: UUID
    level: Int
    parent: sec_Group
    sysTenantId: String
}

type sec_LocalizedConstraintMessage {
    entityName: String
    id: UUID
    operationType: String
    values: String
}

type sec_LoggedAttribute {
    entity: sec_LoggedEntity
    id: UUID
    name: String
}

type sec_LoggedEntity {
    attributes: [sec_LoggedAttribute]
    auto: Boolean
    id: UUID
    manual: Boolean
    name: String
}

type sec_Permission {
    id: UUID
    role: sec_Role
    target: String
    type: Int
    value: Int
}

type sec_Presentation {
    autoSave: Boolean
    componentId: String
    id: UUID
    name: String
    sysTenantId: String
    user: scr_User
    xml: String
}

type sec_RememberMeToken {
    id: UUID
    token: String
    user: scr_User
}

type sec_Role {
    defaultRole: Boolean
    description: String
    id: UUID
    locName: String
    name: String
    permissions: [sec_Permission]
    securityScope: String
    sysTenantId: String
    type: Int
}

type sec_ScreenHistory {
    caption: String
    id: UUID
    substitutedUser: scr_User
    sysTenantId: String
    url: String
    user: scr_User
}

type sec_SearchFolder {
    applyDefault: Boolean
    entityType: String
    filterComponentId: String
    filterXml: String
    id: UUID
    isSet: Boolean
    name: String
    presentation: sec_Presentation
    sortOrder: Int
    sysTenantId: String
    tabName: String
    user: scr_User
}

type sec_SessionAttribute {
    datatype: String
    group: sec_Group
    id: UUID
    name: String
    stringValue: String
    sysTenantId: String
}

type sec_SessionLogEntry {
    address: String
    clientInfo: String
    clientType: String
    finishedTs: Date
    id: UUID
    lastAction: Int
    server: String
    sessionId: UUID
    startedTs: Date
    substitutedUser: scr_User
    sysTenantId: String
    user: scr_User
    userData: String
}

type sec_User {
    active: Boolean
    changePasswordAtNextLogon: Boolean
    email: String
    firstName: String
    group: sec_Group
    groupNames: String
    id: UUID
    ipMask: String
    language: String
    lastName: String
    login: String
    loginLowerCase: String
    middleName: String
    name: String
    password: String
    passwordEncryption: String
    position: String
    substitutions: [sec_UserSubstitution]
    sysTenantId: String
    timeZone: String
    timeZoneAuto: Boolean
    userRoles: [sec_UserRole]
}

type sec_UserRole {
    id: UUID
    role: sec_Role
    roleName: String
    user: scr_User
}

type sec_UserSetting {
    clientType: String
    id: UUID
    name: String
    user: scr_User
    value: String
}

type sec_UserSubstitution {
    endDate: Date
    id: UUID
    startDate: Date
    substitutedUser: scr_User
    sysTenantId: String
    user: scr_User
}

"Built-in java.math.BigDecimal"
scalar BigDecimal

"Date type"
scalar Date

"Date type"
scalar LocalDate

"Date type"
scalar LocalDateTime

"Long type"
scalar Long

"UUID type"
scalar UUID

input inp_datagen_GeneratedEntity {
    entityName: String
    id: UUID
    instName: String
    instanceId: String
}

input inp_scr_AssociationM2MTestEntity {
    datatypesTestEntities: [inp_scr_DatatypesTestEntity]
    id: UUID
    name: String
}

input inp_scr_AssociationM2OTestEntity {
    id: UUID
    name: String
}

input inp_scr_AssociationO2MTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    id: UUID
    name: String
}

input inp_scr_AssociationO2OTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    deeplyNestedTestEntity: inp_scr_DeeplyNestedTestEntity
    id: UUID
    name: String
}

input inp_scr_BoringStringIdTestEntity {
    description: String
    id: String
    uuid: UUID
}

input inp_scr_Car {
    carType: String
    ecoRank: Int
    garage: inp_scr_Garage
    id: UUID
    manufactureDate: Date
    manufacturer: String
    maxPassengers: Int
    mileage: Float
    model: String
    price: BigDecimal
    purchaseDate: Date
    regNumber: String
    technicalCertificate: inp_scr_TechnicalCertificate
    wheelOnRight: Boolean
}

input inp_scr_CarRent {
    car: inp_scr_Car
    fromDate: Date
    fromDateTime: Date
    fromTime: Date
    id: UUID
}

input inp_scr_CompositionO2MTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    id: UUID
    name: String
    quantity: Int
}

input inp_scr_CompositionO2OTestEntity {
    id: UUID
    name: String
    nestedComposition: inp_scr_DeeplyNestedTestEntity
    quantity: Int
}

input inp_scr_DatatypesTestEntity {
    associationM2Mattr: [inp_scr_AssociationM2MTestEntity]
    associationM2Oattr: inp_scr_AssociationM2OTestEntity
    associationO2Mattr: [inp_scr_AssociationO2MTestEntity]
    associationO2Oattr: inp_scr_AssociationO2OTestEntity
    bigDecimalAttr: BigDecimal
    booleanAttr: Boolean
    byteArrayAttr: String
    compositionO2Mattr: [inp_scr_CompositionO2MTestEntity]
    compositionO2Oattr: inp_scr_CompositionO2OTestEntity
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    dateAttr: Date
    dateTimeAttr: Date
    doubleAttr: Float
    enumAttr: String
    id: UUID
    intIdentityIdTestEntityAssociationO2OAttr: inp_scr_IntIdentityIdTestEntity
    integerAttr: Int
    integerIdTestEntityAssociationM2MAttr: [inp_scr_IntegerIdTestEntity]
    localDateAttr: LocalDate
    localDateTimeAttr: LocalDateTime
    localTimeAttr: String
    longAttr: Long
    name: String
    offsetDateTimeAttr: String
    offsetTimeAttr: String
    readOnlyStringAttr: String
    stringAttr: String
    stringIdTestEntityAssociationM2O: inp_scr_StringIdTestEntity
    stringIdTestEntityAssociationO2O: inp_scr_StringIdTestEntity
    timeAttr: Date
    uuidAttr: UUID
}

input inp_scr_DatatypesTestEntity2 {
    datatypesTestEntityAttr: inp_scr_DatatypesTestEntity
    id: UUID
    intIdentityIdTestEntityAttr: inp_scr_IntIdentityIdTestEntity
    integerIdTestEntityAttr: inp_scr_IntegerIdTestEntity
    stringIdTestEntityAttr: inp_scr_StringIdTestEntity
    weirdStringIdTestEntityAttr: inp_scr_WeirdStringIdTestEntity
}

input inp_scr_DatatypesTestEntity3 {
    datatypesTestEntityAttr: [inp_scr_DatatypesTestEntity]
    id: UUID
    intIdentityIdTestEntityAttr: [inp_scr_IntIdentityIdTestEntity]
    integerIdTestEntityAttr: [inp_scr_IntegerIdTestEntity]
    name: String
    stringIdTestEntityAttr: [inp_scr_StringIdTestEntity]
    weirdStringIdTestEntityAttr: [inp_scr_WeirdStringIdTestEntity]
}

input inp_scr_DeeplyNestedTestEntity {
    associationO2Oattr: inp_scr_AssociationO2OTestEntity
    id: UUID
    name: String
}

input inp_scr_FavoriteCar {
    car: inp_scr_Car
    id: UUID
    notes: String
    user: inp_scr_User
}

input inp_scr_Garage {
    address: String
    capacity: Int
    cars: [inp_scr_Car]
    id: UUID
    name: String
    personnel: [inp_scr_User]
    vanEntry: Boolean
    workingHoursFrom: String
    workingHoursTo: String
}

input inp_scr_IntIdentityIdTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    description: String
    id: Int
}

input inp_scr_IntegerIdTestEntity {
    datatypesTestEntities: [inp_scr_DatatypesTestEntity]
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    description: String
    id: Int
}

input inp_scr_SparePart {
    id: UUID
    name: String
    spareParts: inp_scr_SparePart
}

input inp_scr_StringIdTestEntity {
    datatypesTestEntity: inp_scr_DatatypesTestEntity
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    description: String
    identifier: String
    productCode: String
}

input inp_scr_TechnicalCertificate {
    car: inp_scr_Car
    certNumber: String
    id: UUID
}

input inp_scr_User {
    active: Boolean
    changePasswordAtNextLogon: Boolean
    email: String
    firstName: String
    group: inp_sec_Group
    groupNames: String
    id: UUID
    ipMask: String
    language: String
    lastName: String
    login: String
    loginLowerCase: String
    middleName: String
    name: String
    password: String
    passwordEncryption: String
    phone: String
    position: String
    substitutions: [inp_sec_UserSubstitution]
    sysTenantId: String
    timeZone: String
    timeZoneAuto: Boolean
    userRoles: [inp_sec_UserRole]
}

input inp_scr_WeirdStringIdTestEntity {
    datatypesTestEntity3: inp_scr_DatatypesTestEntity3
    description: String
    id: String
    identifier: String
}

input inp_sec_Constraint {
    checkType: String
    code: String
    entityName: String
    filterXml: String
    groovyScript: String
    group: inp_sec_Group
    id: UUID
    isActive: Boolean
    joinClause: String
    operationType: String
    sysTenantId: String
    whereClause: String
}

input inp_sec_EntityLog {
    changes: String
    entity: String
    entityInstanceName: String
    eventTs: Date
    id: UUID
    sysTenantId: String
    type: String
    user: inp_scr_User
}

input inp_sec_Filter {
    code: String
    componentId: String
    globalDefault: Boolean
    id: UUID
    name: String
    sysTenantId: String
    user: inp_scr_User
    xml: String
}

input inp_sec_Group {
    constraints: [inp_sec_Constraint]
    hierarchyList: [inp_sec_GroupHierarchy]
    id: UUID
    name: String
    parent: inp_sec_Group
    sessionAttributes: [inp_sec_SessionAttribute]
    sysTenantId: String
}

input inp_sec_GroupHierarchy {
    group: inp_sec_Group
    id: UUID
    level: Int
    parent: inp_sec_Group
    sysTenantId: String
}

input inp_sec_LocalizedConstraintMessage {
    entityName: String
    id: UUID
    operationType: String
    values: String
}

input inp_sec_LoggedAttribute {
    entity: inp_sec_LoggedEntity
    id: UUID
    name: String
}

input inp_sec_LoggedEntity {
    attributes: [inp_sec_LoggedAttribute]
    auto: Boolean
    id: UUID
    manual: Boolean
    name: String
}

input inp_sec_Permission {
    id: UUID
    role: inp_sec_Role
    target: String
    type: Int
    value: Int
}

input inp_sec_Presentation {
    autoSave: Boolean
    componentId: String
    id: UUID
    name: String
    sysTenantId: String
    user: inp_scr_User
    xml: String
}

input inp_sec_RememberMeToken {
    id: UUID
    token: String
    user: inp_scr_User
}

input inp_sec_Role {
    defaultRole: Boolean
    description: String
    id: UUID
    locName: String
    name: String
    permissions: [inp_sec_Permission]
    securityScope: String
    sysTenantId: String
    type: Int
}

input inp_sec_ScreenHistory {
    caption: String
    id: UUID
    substitutedUser: inp_scr_User
    sysTenantId: String
    url: String
    user: inp_scr_User
}

input inp_sec_SearchFolder {
    applyDefault: Boolean
    entityType: String
    filterComponentId: String
    filterXml: String
    id: UUID
    isSet: Boolean
    name: String
    presentation: inp_sec_Presentation
    sortOrder: Int
    sysTenantId: String
    tabName: String
    user: inp_scr_User
}

input inp_sec_SessionAttribute {
    datatype: String
    group: inp_sec_Group
    id: UUID
    name: String
    stringValue: String
    sysTenantId: String
}

input inp_sec_SessionLogEntry {
    address: String
    clientInfo: String
    clientType: String
    finishedTs: Date
    id: UUID
    lastAction: Int
    server: String
    sessionId: UUID
    startedTs: Date
    substitutedUser: inp_scr_User
    sysTenantId: String
    user: inp_scr_User
    userData: String
}

input inp_sec_User {
    active: Boolean
    changePasswordAtNextLogon: Boolean
    email: String
    firstName: String
    group: inp_sec_Group
    groupNames: String
    id: UUID
    ipMask: String
    language: String
    lastName: String
    login: String
    loginLowerCase: String
    middleName: String
    name: String
    password: String
    passwordEncryption: String
    position: String
    substitutions: [inp_sec_UserSubstitution]
    sysTenantId: String
    timeZone: String
    timeZoneAuto: Boolean
    userRoles: [inp_sec_UserRole]
}

input inp_sec_UserRole {
    id: UUID
    role: inp_sec_Role
    roleName: String
    user: inp_scr_User
}

input inp_sec_UserSetting {
    clientType: String
    id: UUID
    name: String
    user: inp_scr_User
    value: String
}

input inp_sec_UserSubstitution {
    endDate: Date
    id: UUID
    startDate: Date
    substitutedUser: inp_scr_User
    sysTenantId: String
    user: inp_scr_User
}